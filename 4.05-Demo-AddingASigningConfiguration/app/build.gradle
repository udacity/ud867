/*

Signing an app gives you a cryptographic way to associate your app with a
secret key you control. To sign this app, we need to do three things. First we
need to create a keystore and a key. Second, we need to create a signing
config in our build.gradle. The signing config basically describes where to
find and access the keystore and key. Then finally we need to assign the
signing configuration to a build type.

You can do this entire signing process via command line tools, so don't think
there's anything magic happening here. That being said, let's go ahead and use
the Android Studio "Generate Signed APK" Wizard to create our keystore. This
wizard is actually for generating a one-off signed APK, and what we would like
to do is configure our release build type so that it's always signed.

To create our keystore, navigate to Build > Generate Signed APK...

We want to sign the app module, so hit Next, now hit Create New... Hit the
dots, then click the gradle logo to change to the project directory, and name
the keystore "keystore.jks". We'll create a key with the alias Udacity, and
make the passwords to both the keystore and the key itself "udacity". We'll
leave the validity duration the default 25 years. You can fill in as much of
the demographic information as you're inclined to.

Once you hit Ok, the keystore has been created, and you can exit this wizard.
Now we're going to use a different Android Studio wizard to create a signing
configuration that uses the key we just created. Right click on the app
directory and selected "Open Module Settings". We'll open the Signing tab, and
click the plus sign to create a new configuration. We'll name it
defaultConfig, and add the location of the keystore, the keystore password,
the key alias, and the key password. When we hit okay and head back to our
build.gradle file, we find that a configuration block has been added to our
build script.

Note that the storeFile field is using an absolute path, which isn't very
portable. There are various issues you might want to consider regarding the
security of checking your keystore and passwords into version control, but the
most expedient thing to do is use Groovy string interpolation and the rootDir
property on the project object to make the keystore location relative to the
project root directory.

Now the last step is to assign this signing configuration to a build type.
Let's use the Android Studio wizard once more. We'll open up our Module
Settings once again, and open the Build Types tab. Select `release`, and click
the "Signing Config" dropdown, and select our defaultConfig. Now if we take
another look at our build script, we see the line `signingConfig
signingConfigs.config` has been added to our release build type configuration
block.

We're now set up for automatic signing. To verify that our APK is indeed being
signed, we'll run

    $ ./gradlew assemble

Now we can look into the release APK using the following command

    $ unzip -l app/build/outputs/apk/app-release.apk

The last couple files in the APK are the files that contain the signature

    26754  04-29-15 15:10   META-INF/CERT.SF
      776  04-29-15 15:10   META-INF/CERT.RSA

*/

apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'udacity'
            keyPassword 'password'
            storeFile file("$rootDir/keystore.jks")
            storePassword 'password'
        }
    }
    compileSdkVersion 24
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.udacity.gradle.signing"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:24.1.1'
}
