/*

Let's define a trivial Gradle project to work with. This one doesn't compile
or build anything, it just tells a joke.

*/

task tellJoke << {
    println "What's a build master's favorite black metal band?"
    println "Gradle of Filth!"
}

/*

Let's import this project into Android Studio. Open Android Studio, and from
the splash screen, select "Import project(Eclipse ADT, Gradle, etc.)", or
select File > New > Import Project, navigate to this build.gradle file, and
hit OK.

When prompted, allow Android Studio to set up the Gradle wrapper. Android
Studio will initially complain about an "Unregistered VCS root", go ahead and
ignore that for now.

Android Studio has already created a whole slew of new files. To see what's
going on, open the project view by hitting Command-1, or click on the Project
tab at the top left of the window. You still won't see anything for the
moment, since the Project pane is configured to display only the files that
are relevant for an Android build. Fix that by clicking on the Android drop
down and selecting "Project". Now you can see this build.gradle file, as well
as the files from the Gradle wrapper, and a bunch of extra stuff added by
Android Studio.

There are several ways to run Gradle tasks from Android Studio. The first is
from the terminal at the bottom left. Note that the first time you use the
Gradle wrapper created by Android Studio, you may need to add execution
permissions for the wrapper script, like so:

    $ chmod +x gradlew

Now you can run tasks using the Gradle wrapper, just as we've been doing in
the last couple lessons.

    $ ./gradlew tellJoke

There's also an easier way to run Gradle tasks from Android studio, and that's
by opening the Gradle pane on the right of the window. You can run tasks by
double clicking.

Let's try adding a second task to our project.

*/

task tellAnotherJoke <<{
    println "How long does it take to master build tools?"
    println "From the Gradle to the grave."
}

/*

Note that to get Android Studio to recognize this new task, we need to trigger
a sync between Gradle and Android Studio's internal model of our project. We
can do that either by clicking on the blue circular arrows in the Gradle pane,
or by clicking on the toolbar icon with the Gradle logo and Blue arrow.

Now Android studio recognizes our new task, and we can run it from the Gradle
pane.

A moment ago, we just had a build.gradle file, and now we've got a directory
totally full of obscure files and directories. Unfortunately IDEs tend to do
that. Let's take a look at the various files, and figure out why they're all
there.

The .gradle directory is where Gradle stores information for incremental build
support. The .idea directory is where Android Studio stores its model of your
project. The build directory is where your build outputs would go, if this
build generated any. For now it's just holding onto some information related
to the synchronization between Gradle's project model and Android Studio's
project model. Finally, you know the gradle directory. That's where the
wrapper jar and properties are stored.

In the root folder, we have the .iml file, which stores more information on
Android Studio's project model. We have our build.gradle file, and the
familiar wrapper scripts. We also have local.properties file that Gradle will
use later to find the location of the Android SDK.

*/
